// Code generated by "stringer -output stringer.go -type mode,name"; DO NOT EDIT.

package ccgo

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[void-0]
	_ = x[lvalue-1]
	_ = x[value-2]
	_ = x[call-3]
	_ = x[dselect-4]
}

const _mode_name = "voidlvaluevaluecalldselect"

var _mode_index = [...]uint8{0, 4, 10, 15, 19, 26}

func (i mode) String() string {
	if i < 0 || i >= mode(len(_mode_index)-1) {
		return "mode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _mode_name[_mode_index[i]:_mode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[external-0]
	_ = x[typename-1]
	_ = x[taggedStruct-2]
	_ = x[taggedUnion-3]
	_ = x[taggedEum-4]
	_ = x[enumConst-5]
	_ = x[importQualifier-6]
	_ = x[macro-7]
	_ = x[define-8]
	_ = x[staticInternal-9]
	_ = x[staticNone-10]
	_ = x[automatic-11]
	_ = x[ccgoAutomatic-12]
	_ = x[preserve-13]
}

const _name_name = "externaltypenametaggedStructtaggedUniontaggedEumenumConstimportQualifiermacrodefinestaticInternalstaticNoneautomaticccgoAutomaticpreserve"

var _name_index = [...]uint8{0, 8, 16, 28, 39, 48, 57, 72, 77, 83, 97, 107, 116, 129, 137}

func (i name) String() string {
	if i < 0 || i >= name(len(_name_index)-1) {
		return "name(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _name_name[_name_index[i]:_name_index[i+1]]
}
